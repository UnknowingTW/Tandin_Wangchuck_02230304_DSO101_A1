name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/todo-app
  NODE_VERSION: '20'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # 2. Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      # 3. Install dependencies and run tests
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
      
      # 4. Run security audit
      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      # 1. Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 3. Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # 4. Extract metadata
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      # 5. Build & Push Docker Image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      # 6. Deploy to Render.com (via webhook)
      - name: Trigger Render Deployment
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST ${{ secrets.RENDER_DEPLOY_HOOK }})
          if [ $response -eq 200 ] || [ $response -eq 201 ]; then
            echo "✅ Deployment triggered successfully (HTTP $response)"
          else
            echo "❌ Deployment failed (HTTP $response)"
            exit 1
          fi
      
      # 7. Cleanup
      - name: Cleanup Docker
        if: always()
        run: docker system prune -af